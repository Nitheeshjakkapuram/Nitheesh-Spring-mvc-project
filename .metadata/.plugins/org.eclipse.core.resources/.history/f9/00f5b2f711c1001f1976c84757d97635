package com.springbootexamples.service;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.springbootexamples.entity.ProductEntity;
import com.springbootexamples.model.ProductModel;
import com.springbootexamples.repository.ProductRepository;
@Service
public class ProductService {
	@Autowired
    private ProductRepository productRepository;

    public void saveProductDetails(ProductModel productModel) {
       double stockValue;
    	 
        stockValue = productModel.getPrice() * productModel.getQuantity();

        double discountPrice;
        discountPrice = productModel.getPrice() * productModel.getDiscountRate() / 100;
        
        double offerprice;
        offerprice=productModel.getPrice() - discountPrice;
        
        double taxprice;
        taxprice=productModel.getDiscountRate()*18/100;
        
        double finalprice;
        finalprice=offerprice + taxprice;
        
        
        ProductEntity productEntity = new ProductEntity();
        productEntity.setName(productModel.getName());
        productEntity.setBrand(productModel.getBrand());
        productEntity.setMadeIn(productModel.getMadeIn());
        productEntity.setPrice(productModel.getPrice());
        productEntity.setQuantity(productModel.getQuantity());
        productEntity.setDiscountRate(productModel.getDiscountRate());
        productEntity.setStockvalue(stockValue); 
        productEntity.setDiscountprice(discountPrice);
        productEntity.setOfferPrice(offerprice);
        productEntity.setTaxprice(taxprice);
        productEntity.setFinalprice(finalprice);
        
        
      
       
        productRepository.save(productEntity);
    }
    
    public List<ProductEntity>getAllproducts()
    {
    	List<ProductEntity>products=productRepository.findAll();
    	return products;
    	
    }
    public ProductEntity searchById(Long id) {
		Optional<ProductEntity>optionalData=productRepository.findById(id);
		if(optionalData.isPresent())
		{
			ProductEntity product=optionalData.get();
			return product;
		}
		else
		{
			return null;
		}
	}

	public void deleteproductById(Long id) {
		
		productRepository.deleteById(id);
	}
}
